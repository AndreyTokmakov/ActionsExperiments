
name: GitCommitPipeline

on:
  push:
    branches: [ "main", "develop", "commit_from_pipeline" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  GitCommitPipeline:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # test our matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Install the test and reporting requirements
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f TestCoverage/requirements.txt ]; then pip install -r TestCoverage/requirements.txt; fi
          pip install pytest-html genbadge defusedxml

      # Running API Integration tests
      - name: Running API Integration tests
        run: |
          cd TestCoverage
          coverage run --omit=/usr/lib/python3/dist-packages/* -m pytest

      # Generate test coverage HTML reports:
      - name: Generate Test Coverage report
        run: |
          cd TestCoverage
          coverage html
          coverage xml
          genbadge coverage -i coverage.xml
          : # coverage report -m > result.txt

      # Upload test coverage HTML reports
      - name: Upload the test coverage archive
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: TestCoverage/htmlcov/*
          retention-days: 10

      - name: Commit badge
        run: |
          : # rm -f .github/artifacts/coverage-badge.svg    
          : # cp TestCoverage/coverage.xml .github/artifacts/coverage.xml
          : # cp TestCoverage/result.txt .github/artifacts/result.txt
          echo ${{ github.repository }}
          echo ${{ github.repository_owner }}
          mv TestCoverage/coverage-badge.svg .github/artifacts/coverage-badge.svg
          git config --global user.email "no-reply@github.com"
          git config --global user.name "GitHub Actions"
          git add .github/artifacts/coverage-badge.svg
          git commit -m "Update artifacts"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push

